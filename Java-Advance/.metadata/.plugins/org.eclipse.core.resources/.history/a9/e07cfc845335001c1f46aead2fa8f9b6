package com.springboot.controller;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessageHeaderAccessor;
import org.springframework.stereotype.Controller;

import com.springboot.entity.ChatMessagePojo;

@Controller
public class ChatController {
	
	
	@MessageMapping("/chat.sendMessage")
	@SendTo("/topic/public")
	public ChatMessagePojo sendMessage(@Payload ChatMessagePojo chatMessagePojo)
	 {
		return chatMessagePojo;
	 }

/*----------------All the messages sent from clients that starts with "/app" will route ormapped with @MessageMapping annotation.---------------------*/
/*----------------e.g:if the client calls the API or endpoints such as /app/chat.sendMessagethen it will be mapped with sendMessage().---------------- 
 * ----------------Similarly, for /app/chat.addUser, it will be mapped with addUser().---------------------------------------------------------------*/
   

	
/* --------------Method addUser() will broadcast the user join the event in the group chat among all connected users.--------------------------------- */	
	@MessageMapping("/chat.addUser")
	@SendTo("/topic/public")
	public ChatMessagePojo addUser(@Payload ChatMessagePojo chatMessagePojo, SimpMessageHeaderAccessor headerAccessor) 
	{ 
// Add username in web socket session
		headerAccessor.getSessionAttributes().put("username", chatMessagePojo.getSender());
        return chatMessagePojo;
    }
}
