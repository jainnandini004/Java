autowiring:
```````````
Autowiring feature of spring framework enables you to inject the object 
dependency(reference) implicitly. 


It internally uses setter or constructor injection


note:
"""""
if we want to achieve autowiring we have to use autowire attribute for a
bean element.

possible values:
-byName
-byType
-Constructor
				 
				 
if autowire=byName

springcontext.xml:
```````````````````
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


   <bean id="stu" class="com.sopra.beans.Student" autowire="byName"/>
  
    
    <bean id="address" class="com.sopra.beans.Address">
    
       <property name="cityName" value="Hyd"/>
       <property name="stateName" value="Tel"/>
       <property name="countryName" value="India"/>
    
    </bean>


</beans>

Student.java:
``````````````
package com.sopra.beans;

public class Student {
	
	private Address address;

	public Address getAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}
	
	public Student()
	{
		
	}

	@Override
	public String toString() {
		return "Student [address=" + address + "]";
	}
	

}


note:
`````
when we are using either autowire attribute values are byName or byType 
internally setter injection will happen.

if we use autowire attribute value as constructor internally it uses byType
only but constructor will injection happen.


springcontext.xml:
``````````````````
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


   <bean id="stu" class="com.sopra.beans.Student" autowire="constructor"/>
  
    
    <bean class="com.sopra.beans.Address">
    
       <property name="cityName" value="Hyd"/>
       <property name="stateName" value="Tel"/>
       <property name="countryName" value="India"/>
    
    </bean>


</beans>


annotation based wiring:
`````````````````````````
So instead of using XML to describe a bean wiring, 
you can move the bean configuration into the component class
itself by using annotations on the relevant class, method, or field declaration.


in case of annotation based wiring autowire attribute is not required
for a bean element.

we have to add @autowired annotation in the java bean class.

we no need to maintain any setter,or constructor for a bean class.

note:
````
by default spring container could not recognize these annotations , to recognize
we have to add one xml element in spring configuration file
 <context:annotation-config/>
 
note:
````
to make it execute this , we have to add one more jar spring-aop 


Student.java:
``````````````
package com.sopra.beans;

import org.springframework.beans.factory.annotation.Autowired;

public class Student {
	
	@Autowired
	private Address address;

	public Student()
	{
		
	}

	@Override
	public String toString() {
		return "Student [address=" + address + "]";
	}
	

}

springcontext.xml:
``````````````````
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

  <context:annotation-config></context:annotation-config>
   <bean id="stu" class="com.sopra.beans.Student"/>  <!--Bean Tag used to create object of class-->
  
    
    <bean class="com.sopra.beans.Address">
    
       <property name="cityName" value="Hyd"/>
       <property name="stateName" value="Tel"/>
       <property name="countryName" value="India"/>
    
    </bean>


</beans>

Test.java:
``````````
package com.sopra.beans;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Test {
	
	public static void main(String[] args) {
		
		
		ApplicationContext context = new ClassPathXmlApplicationContext("springcontext.xml");
		
		Student stu = (Student)context.getBean("stu");
		System.out.println(stu);
	}

}



 
 
autodisovery:
``````````````
Autodiscovery feature frees us from writing all bean declarations
and bean autowirings.

Note:
`````
this feature can be enabled by adding one xml element i.e.

<context:component-scan base-package=""/>


@Component annotation:
``````````````````````
@Component is an annotation that allows Spring to automatically detect 
our custom beans. In other words, without having to write any explicit code,
Spring will: Scan our application for classes annotated with @Component.
 
 Instantiate them and inject any specified dependencies into them. 
 Inject them wherever needed.


Student.java:
`````````````
package com.sopra.beans;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class Student {
	
	@Autowired
	private Address address;

	public Student()
	{
		
	}

	@Override
	public String toString() {
		return "Student [address=" + address + "]";
	}
	

}

springcontext.xml:
``````````````````
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

  <context:component-scan base-package="com.sopra.beans"></context:component-scan>
  
    
    <bean class="com.sopra.beans.Address">
    
       <property name="cityName" value="Hyd"/>
       <property name="stateName" value="Tel"/>
       <property name="countryName" value="India"/>
    
    </bean>


</beans>

Test.java:
```````````
package com.sopra.beans;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Test {
	
	public static void main(String[] args) {
		
		
		ApplicationContext context = new ClassPathXmlApplicationContext("springcontext.xml");
		
		Student stu = (Student)context.getBean("student");
		System.out.println(stu);
	}

}

  

 -autowiring (byName,byType,constructor)
 -annotation based wiring(@autowired)
 -autodiscovery
 