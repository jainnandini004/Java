java based configuration in spring:
``````````````````````````````````
Java-based configuration option enables you to write most of your Spring 
configuration without XML but with the help of few Java-based annotations

@Configuration

the class which is annotated with @Configuration it represents it contains
configurable information.


Annotating a class with the @Configuration indicates that the class can be 
used by the Spring IoC container as a source of bean definitions. 


The @Bean annotation tells Spring that a method annotated with @Bean will 
return an object that should be registered as a bean in the Spring 
application context.



Student.java:
`````````````
package com.sopra;

public class Student {
	
	private int stid;
	private String stname;
	public int getStid() {
		return stid;
	}
	public void setStid(int stid) {
		this.stid = stid;
	}
	public String getStname() {
		return stname;
	}
	public void setStname(String stname) {
		this.stname = stname;
	}
	
	public Student()
	{
		
	}

}

MyConfig.java:
``````````````
package com.sopra;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class MyConfig {
	
	@Bean("stu")
	public Student getStudent()
	{
		return new Student();
	}
	

}


App.java:
``````````
package com.sopra;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
       
    	ApplicationContext context = new AnnotationConfigApplicationContext(MyConfig.class);
    	Student stu = (Student)context.getBean("stu");
    	stu.setStid(100);
    	stu.setStname("ram");
    	
    	System.out.println("student id: " + stu.getStid());
    	System.out.println("student name: " + stu.getStname());
    	
    }
}


spring jdbc module:
````````````````````

purpose:

  to implement persistence/database logic 
  
  jdbc:
  
     load,connection,statement/prepareStatement,process the query,close the connection
	 

JdbcTemplate


                dao class 
		 
                |
				
 				JdbcTemplate
				
				|
				
				DataSource(Interface)
				
				|
				DriverManagerDataSource
				
				  -driverClassName
				  -url
				  -username
				  -password
				  
				  

springcontext.xml:
```````````````````
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

  
<context:component-scan base-package="com.sopra"></context:component-scan>
  
  
  <bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
  
     <property name="dataSource" ref="ds"/>
 
  </bean>
  
  <bean id="ds" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
     
       <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
       <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
       <property name="username" value="sopra"/>
       <property name="password" value="sopra"/>
  
  </bean>

</beans>

Employee.java:
````````````````
package com.sopra.beans;

public class Employee {
	
	private int empid;
	private String firstName;
	private String lastName;
	public int getEmpid() {
		return empid;
	}
	public void setEmpid(int empid) {
		this.empid = empid;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public Employee(int empid, String firstName, String lastName) {
		super();
		this.empid = empid;
		this.firstName = firstName;
		this.lastName = lastName;
	}
	public Employee() {
		super();
	}
	@Override
	public String toString() {
		return "Employee [empid=" + empid + ", firstName=" + firstName + ", lastName=" + lastName + "]";
	}
	
	

}

EmployeeDao.java:
`````````````````
package com.sopra.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import com.sopra.beans.Employee;

@Component("dao")
public class EmployeeDao {
	
	@Autowired
	private JdbcTemplate jdbcTemplate;

	

	
	
	public int saveEmployee(Employee e)
	{
		
		String sql = "insert into employee values(?,?,?)";
		
		return jdbcTemplate.update(sql, e.getEmpid(),e.getFirstName(),e.getLastName());
	}
	
	//update,delete,select query,list of rows
	
	
	

}

App.java:
`````````
package com.sopra.beans;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.sopra.dao.EmployeeDao;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
      ApplicationContext context = new ClassPathXmlApplicationContext("springcontext.xml");
      EmployeeDao dao = (EmployeeDao)context.getBean("dao");
      
      Employee emp = new Employee();
      emp.setEmpid(101);
      emp.setFirstName("nandini");
      emp.setLastName("jain");
      
      int x = dao.saveEmployee(emp);
      System.out.println(x + "row(s) inserted");
    	
    }
}



CREATE TABLE Employee (empId int, empfirstName varchar(10), emplastName varchar(10));