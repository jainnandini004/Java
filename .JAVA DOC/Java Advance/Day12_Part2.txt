spring boot:
`````````````
spring - pivotal organization
  
Spring Boot is Spring's convention-over-configuration solution for 
creating stand-alone, production-grade Spring-based Applications that you 
can "just run".

It is preconfigured with the Spring team's "opinionated view" of the best 
configuration and use of the Spring platform and third-party libraries so 
you can get started with minimum fuss. Most Spring Boot applications need 
very little Spring configuration.

Key Features:
````````````

Create stand-alone Spring applications
Embed Tomcat or Jetty directly (no need to deploy WAR files)

Provide opinionated 'starter' Project Object Models (POMs) to simplify 
your Maven configuration

Automatically configure Spring whenever possible

Provide production-ready features such as metrics, health checks and
externalized configuration

Absolutely no code generation and no requirement for XML configuration.

Smooth Integration and supports all Enterprise Integration Patterns. 
  

->spring boot is a projet that actually built on top of the spring f/w.

->it provides an easier and faster way to setup,configure and run both 
  simple and web applications.
  
->in spring boot, there is no requirement for xml configuration.

->It uses convention over configuration software design pattern that means
  it decreases the developer's effort.
  
  
->we can use sts ide(spring tool suite) or spring intializer to develop
  spring boot java applications.
  
  
  
 along with spring boot f/w,some other spring projects are there to help
 to build applications addresing moder business needs.
 
      ->spring data
	     . it simplifies data accessf from the relational and
		   nosql databases.
		
      ->spring security
  
      ->spring social

       .....

	   
prerequisites to develop applications using spring boot?


  -java 1.8
  -Maven 3.0+
  -Spring f/w 5.x
  -an ide (sts) is recommended

latest version of spring boot:
```````````````````````````````
The latest version of Spring Boot is 2.2.1

  
  
  spring ->spring f/w is a widely used java ee f/w for building applications
  
  spring boot -> it is also a f/w , widely used to devlop REST API's
  
  
    REST -Representational State Transfer(web services)
	
	
	sprinf f/w -> 
	doesnot support in memory databases -> 
	
	but where as spring boot supports in memory databses such as 
	derby ,h2 etc.
	
	
	Developers manually define dependencies for the spring project
	in pom.xml file.
	
	
	spring boot comes with the concept of starter in pom.xml file
	
	that internally takes care of downloading dependencies jars based on spring
	boot requirement.
	
	
	
spring boot vs spring mvc:
`````````````````````````
spring boot:

 there is no requirement for a deployment descriptor(web.xml file)
 it reduces development time and increase productivity

spring:
 a deployment descriptor is required.
 it takes more time to achieve the same.
 
 
spring boot architecture:
`````````````````````````

    json => java script object notation
	
	
	   presentation layer
	   
	     -handles the HTTP requests, convert the json to object 
		  and after that it transfers this object to business layer
	   
	   business layer
	   
	     -it consists of service classes and uses services provided by 
		  data access layers.
		  
	   
	   persistence layer
	   
	     -translates business objects from and to database rows.
	   
	   database layer
	   
	     -crud operations performed.
		 
		 
creating spring boot application using spring initializer tool:
``````````````````````````````````````````````````````````````

   https://start.spring.io


com.sopra(SpringBootApplication.java):
``````````````````````````````````````

package com.sopra;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.ComponentScan;

import com.sopra.beans.Student;

@SpringBootApplication

public class SpringbootDemoApplication {

	public static void main(String[] args) {
	ApplicationContext context = SpringApplication.run(SpringbootDemoApplication.class, args);
	
	Student student = context.getBean(Student.class);
	
	//setting the values to Student object by calling setter methods - setter injection 
	
	student.setStid(100);
	student.setStname("rama");
	
	//we are displaying student object - toString()
	System.out.println(student);
	}
}


com.sopra.beans(Student)
````````````````` ```````  
 package com.sopra.beans;

import org.springframework.stereotype.Component;

@Component
public class Student {
	
	@Override
	public String toString() {
		return "Student [stid=" + stid + ", stname=" + stname + "]";
	}

	private int stid;
	private String stname;
	
	
	public int getStid() {
		return stid;
	}
	public void setStid(int stid) {
		this.stid = stid;
	}
	public String getStname() {
		return stname;
	}
	public void setStname(String stname) {
		this.stname = stname;
	}
	
	public Student() {
		
	}
	

}




note:
``````
@SpringBootConfiguration vs @EnableAutoConfiguration:
`````````````````````````````````````````````````````	
@SpringBootConfiguration annotation tells us that a class is a configuration class, 
and @EnableAutoConfiguration automatically configures the Spring application based 
on its included jar files.